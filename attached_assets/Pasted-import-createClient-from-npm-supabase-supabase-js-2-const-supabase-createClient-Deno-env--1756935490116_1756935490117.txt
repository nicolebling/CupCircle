import { createClient } from 'npm:@supabase/supabase-js@2';
const supabase = createClient(Deno.env.get('SUPABASE_URL'), Deno.env.get('SUPABASE_SERVICE_ROLE_KEY'));
function parseDateTime(dateStr, timeStr) {
  // dateStr format: "2025-04-29"
  // timeStr format: "10:00:00"
  const combinedStr = `${dateStr}T${timeStr}`;
  return new Date(combinedStr);
}
function shouldSendNotification(meetingDateTime, notificationType, currentTime) {
  const timeDiff = meetingDateTime.getTime() - currentTime.getTime();
  const minutesDiff = timeDiff / (1000 * 60);
  switch(notificationType){
    case 'reminder_24h':
      // Send 24 hours before (1440 minutes), with 5-minute tolerance
      return minutesDiff <= 1440 && minutesDiff > 1435;
    case 'reminder_1h':
      // Send 1 hour before (60 minutes), with 5-minute tolerance
      return minutesDiff <= 60 && minutesDiff > 55;
    case 'reminder_15m':
      // Send 15 minutes before, with 5-minute tolerance
      return minutesDiff <= 15 && minutesDiff > 10;
    default:
      return false;
  }
}
async function sendPushNotification(pushToken, title, body) {
  try {
    const response = await fetch('https://exp.host/--/api/v2/push/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${Deno.env.get('EXPO_ACCESS_TOKEN')}`
      },
      body: JSON.stringify({
        to: pushToken,
        title,
        body,
        sound: 'default',
        data: {
          type: 'meeting_reminder'
        }
      })
    });
    return await response.json();
  } catch (error) {
    console.error('Error sending push notification:', error);
    return null;
  }
}
Deno.serve(async (req)=>{
  try {
    console.log('üïê Scheduled notifications check started');
    const currentTime = new Date();
    // Get all confirmed meetings that haven't been cancelled
    const { data: meetings, error: meetingsError } = await supabase.from('matching').select(`
        *,
        user1:profiles!matching_user1_id_fkey(id, name, push_token),
        user2:profiles!matching_user2_id_fkey(id, name, push_token)
      `).eq('status', 'confirmed').gte('meeting_date', currentTime.toISOString().split('T')[0]) // Only future or today's meetings
    ;
    if (meetingsError) {
      console.error('Error fetching meetings:', meetingsError);
      throw meetingsError;
    }
    if (!meetings || meetings.length === 0) {
      console.log('No confirmed meetings found');
      return new Response(JSON.stringify({
        message: 'No meetings to process'
      }), {
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
    console.log(`Found ${meetings.length} confirmed meetings`);
    let notificationsSent = 0;
    for (const meeting of meetings){
      try {
        const meetingDateTime = parseDateTime(meeting.meeting_date, meeting.start_time);
        console.log(`Processing meeting: ${meeting.id}, datetime: ${meetingDateTime.toISOString()}`);
        // Check for each notification type
        const notificationTypes = [
          'reminder_24h',
          'reminder_1h',
          'reminder_15m'
        ];
        for (const notificationType of notificationTypes){
          if (shouldSendNotification(meetingDateTime, notificationType, currentTime)) {
            console.log(`Should send ${notificationType} for meeting ${meeting.id}`);
            // Check if notification already sent
            const { data: existingNotification } = await supabase.from('scheduled_notifications').select('id').eq('meeting_id', meeting.id).eq('notification_type', notificationType).eq('sent', true).single();
            if (existingNotification) {
              console.log(`${notificationType} already sent for meeting ${meeting.id}`);
              continue;
            }
            // Send to both users
            const users = [
              {
                user: meeting.user1,
                partnerId: meeting.user2_id
              },
              {
                user: meeting.user2,
                partnerId: meeting.user1_id
              }
            ];
            for (const { user, partnerId } of users){
              if (!user?.push_token) {
                console.log(`No push token for user ${user?.id}`);
                continue;
              }
              // Get partner name
              const { data: partnerProfile } = await supabase.from('profiles').select('name').eq('id', partnerId).single();
              const partnerName = partnerProfile?.name || 'your coffee partner';
              const cafeName = meeting.meeting_location.split('|||')[0];
              let title = '';
              let body = '';
              switch(notificationType){
                case 'reminder_24h':
                  title = '‚òï Coffee Chat Tomorrow';
                  body = `Don't forget your coffee chat with ${partnerName} at ${cafeName} tomorrow at ${meeting.start_time}`;
                  break;
                case 'reminder_1h':
                  title = '‚òï Coffee Chat in 1 Hour';
                  body = `Your coffee chat with ${partnerName} at ${cafeName} starts in 1 hour`;
                  break;
                case 'reminder_15m':
                  title = '‚òï Coffee Chat Starting Soon';
                  body = `Your coffee chat with ${partnerName} at ${cafeName} starts in 15 minutes`;
                  break;
              }
              // Send push notification
              const result = await sendPushNotification(user.push_token, title, body);
              if (result) {
                console.log(`‚úÖ Sent ${notificationType} to user ${user.id}`);
                notificationsSent++;
                // Record that notification was sent
                await supabase.from('scheduled_notifications').upsert({
                  meeting_id: meeting.id,
                  user_id: user.id,
                  notification_type: notificationType,
                  title,
                  body,
                  sent: true,
                  sent_at: currentTime.toISOString()
                });
              } else {
                console.error(`‚ùå Failed to send ${notificationType} to user ${user.id}`);
              }
            }
          }
        }
      } catch (error) {
        console.error(`Error processing meeting ${meeting.id}:`, error);
      }
    }
    console.log(`üéâ Scheduled notifications check completed. Sent ${notificationsSent} notifications`);
    return new Response(JSON.stringify({
      message: 'Scheduled notifications processed',
      notificationsSent,
      meetingsProcessed: meetings.length
    }), {
      headers: {
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    console.error('‚ùå Error in scheduled notifications:', error);
    return new Response(JSON.stringify({
      error: error.message
    }), {
      status: 500,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }
});
