 // Get coordinates for a cafe using Google Places API
  async getCafeCoordinates(cafeName: string, address: string): Promise<{ latitude: number; longitude: number } | null> {
    try {
      const apiKey = process.env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY;
      if (!apiKey) {
        console.error('Google Maps API key is missing');
        return null;
      }

      const query = encodeURIComponent(`${cafeName} ${address}`);
      const url = `https://maps.googleapis.com/maps/api/geocoding/json?address=${query}&key=${process.env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY}`;
      
      console.log('Making geocoding request for:', cafeName, address);
      
      const response = await fetch(url);
      
      // Check if response is ok
      if (!response.ok) {
        console.error('Geocoding API request failed:', response.status, response.statusText);
        return null;
      }
      
      // Check if response is JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        console.error('API response is not JSON, content-type:', contentType);
        const text = await response.text();
        console.error('Response text:', text.substring(0, 200));
        return null;
      }
      
      const data = await response.json();
      
      if (data.status === 'OK' && data.results.length > 0) {
        const location = data.results[0].geometry.location;
        console.log('Successfully geocoded:', cafeName, 'â†’', location);
        return {
          latitude: location.lat,
          longitude: location.lng
        };
      } else {
        console.warn('Geocoding failed for:', cafeName, 'Status:', data.status);
        return null;
      }
      
    } catch (error) {
      console.error('Error geocoding cafe:', error);
      return null;
    }
  },

  // Get centroid of selected cafes
  async getCafesCentroid(cafes: string[]): Promise<{ latitude: number; longitude: number } | null> {
    try {
      const coordinates = [];
      
      for (const cafe of cafes) {
        const [cafeName, cafeAddress] = cafe.split('|||');
        const coords = await this.getCafeCoordinates(cafeName, cafeAddress);
        
        if (coords) {
          coordinates.push(coords);
        }
      }
      
      if (coordinates.length === 0) {
        return null;
      }
      
      return this.calculateCentroid(coordinates);
    } catch (error) {
      console.error('Error calculating cafes centroid:', error);
      return null;
    }
  }